//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPPK_Proj.DAO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ModelContainer : DbContext
    {
        public ModelContainer()
            : base("name=ModelContainer")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public  DbSet<DRZAVE> DRZAVE { get; set; }
        public  DbSet<GRADOVI> GRADOVI { get; set; }
        public  DbSet<PUTNI_NALOZI> PUTNI_NALOZI { get; set; }
        public  DbSet<SERVIS_STAVKE> SERVIS_STAVKE { get; set; }
        public  DbSet<SERVISI> SERVISI { get; set; }
        public  DbSet<SERVISNA_KNJIGA> SERVISNA_KNJIGA { get; set; }
        public  DbSet<sysdiagrams> sysdiagrams { get; set; }
        public  DbSet<VOZACI> VOZACI { get; set; }
        public  DbSet<VOZILA> VOZILA { get; set; }
        public  DbSet<STATUS> STATUS { get; set; }
        public  DbSet<V_PutniNalozi> V_PutniNalozi { get; set; }
    
        public virtual int AddConstraint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddConstraint");
        }
    
        public virtual int AddDrzava(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDrzava", nazivParameter);
        }
    
        public virtual int AddEditPN(Nullable<int> iDNalog, Nullable<System.DateTime> otvaranje, Nullable<System.DateTime> zatvaranje, Nullable<int> vozacID, Nullable<int> voziloID, Nullable<int> mjestoStartID, Nullable<int> mjestoCiljID, Nullable<int> statusNaloga)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            var otvaranjeParameter = otvaranje.HasValue ?
                new ObjectParameter("Otvaranje", otvaranje) :
                new ObjectParameter("Otvaranje", typeof(System.DateTime));
    
            var zatvaranjeParameter = zatvaranje.HasValue ?
                new ObjectParameter("Zatvaranje", zatvaranje) :
                new ObjectParameter("Zatvaranje", typeof(System.DateTime));
    
            var vozacIDParameter = vozacID.HasValue ?
                new ObjectParameter("VozacID", vozacID) :
                new ObjectParameter("VozacID", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var mjestoStartIDParameter = mjestoStartID.HasValue ?
                new ObjectParameter("MjestoStartID", mjestoStartID) :
                new ObjectParameter("MjestoStartID", typeof(int));
    
            var mjestoCiljIDParameter = mjestoCiljID.HasValue ?
                new ObjectParameter("MjestoCiljID", mjestoCiljID) :
                new ObjectParameter("MjestoCiljID", typeof(int));
    
            var statusNalogaParameter = statusNaloga.HasValue ?
                new ObjectParameter("StatusNaloga", statusNaloga) :
                new ObjectParameter("StatusNaloga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditPN", iDNalogParameter, otvaranjeParameter, zatvaranjeParameter, vozacIDParameter, voziloIDParameter, mjestoStartIDParameter, mjestoCiljIDParameter, statusNalogaParameter);
        }
    
        public virtual int AddGrad(string ime, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<int> drzavaID)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var drzavaIDParameter = drzavaID.HasValue ?
                new ObjectParameter("DrzavaID", drzavaID) :
                new ObjectParameter("DrzavaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGrad", imeParameter, latitudeParameter, longitudeParameter, drzavaIDParameter);
        }
    
        public virtual int AddVozac(string ime, string prezime, string mobitel, string vozackaDozvola)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var mobitelParameter = mobitel != null ?
                new ObjectParameter("Mobitel", mobitel) :
                new ObjectParameter("Mobitel", typeof(string));
    
            var vozackaDozvolaParameter = vozackaDozvola != null ?
                new ObjectParameter("VozackaDozvola", vozackaDozvola) :
                new ObjectParameter("VozackaDozvola", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVozac", imeParameter, prezimeParameter, mobitelParameter, vozackaDozvolaParameter);
        }
    
        public virtual int AddVozilo(string marka, string tip, Nullable<System.DateTime> godinaProizvodnje, Nullable<System.DateTime> godinaUnosa, Nullable<int> incijalniKm)
        {
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(System.DateTime));
    
            var godinaUnosaParameter = godinaUnosa.HasValue ?
                new ObjectParameter("GodinaUnosa", godinaUnosa) :
                new ObjectParameter("GodinaUnosa", typeof(System.DateTime));
    
            var incijalniKmParameter = incijalniKm.HasValue ?
                new ObjectParameter("IncijalniKm", incijalniKm) :
                new ObjectParameter("IncijalniKm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVozilo", markaParameter, tipParameter, godinaProizvodnjeParameter, godinaUnosaParameter, incijalniKmParameter);
        }
    
        public virtual int CreatePNDataSet(string pNList)
        {
            var pNListParameter = pNList != null ?
                new ObjectParameter("PNList", pNList) :
                new ObjectParameter("PNList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePNDataSet", pNListParameter);
        }
    
        public virtual int CreateTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTables");
        }
    
        public virtual int DBCLEAN()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DBCLEAN");
        }
    
        public virtual int DBINIT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DBINIT");
        }
    
        public virtual int DeletePodataka()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePodataka");
        }
    
        public virtual int DelPutniNalog(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelPutniNalog", iDNalogParameter);
        }
    
        public virtual int DelVozac(Nullable<int> iDVozac)
        {
            var iDVozacParameter = iDVozac.HasValue ?
                new ObjectParameter("IDVozac", iDVozac) :
                new ObjectParameter("IDVozac", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelVozac", iDVozacParameter);
        }
    
        public virtual int EditVozac(Nullable<int> iDVozac, string ime, string prezime, string mobitel, string vozackaDozvola)
        {
            var iDVozacParameter = iDVozac.HasValue ?
                new ObjectParameter("IDVozac", iDVozac) :
                new ObjectParameter("IDVozac", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var mobitelParameter = mobitel != null ?
                new ObjectParameter("Mobitel", mobitel) :
                new ObjectParameter("Mobitel", typeof(string));
    
            var vozackaDozvolaParameter = vozackaDozvola != null ?
                new ObjectParameter("VozackaDozvola", vozackaDozvola) :
                new ObjectParameter("VozackaDozvola", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditVozac", iDVozacParameter, imeParameter, prezimeParameter, mobitelParameter, vozackaDozvolaParameter);
        }
    
        public virtual ObjectResult<ExportData_Result> ExportData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExportData_Result>("ExportData");
        }
    
        public virtual ObjectResult<Nullable<int>> GetDBStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDBStatus");
        }
    
        public virtual ObjectResult<GetGradovi_Result> GetGradovi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGradovi_Result>("GetGradovi");
        }
    
        public virtual ObjectResult<GetGradoviCB_Result> GetGradoviCB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGradoviCB_Result>("GetGradoviCB");
        }
    
        public virtual ObjectResult<Nullable<int>> GetMjestoCilj(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMjestoCilj", iDNalogParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMjestoStart(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMjestoStart", iDNalogParameter);
        }
    
        public virtual ObjectResult<GetPutniNalozi_Result> GetPutniNalozi(Nullable<int> statusNaloga)
        {
            var statusNalogaParameter = statusNaloga.HasValue ?
                new ObjectParameter("StatusNaloga", statusNaloga) :
                new ObjectParameter("StatusNaloga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPutniNalozi_Result>("GetPutniNalozi", statusNalogaParameter);
        }
    
        public virtual ObjectResult<GetPutniNaloziXML_Result> GetPutniNaloziXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPutniNaloziXML_Result>("GetPutniNaloziXML");
        }
    
        public virtual ObjectResult<Nullable<int>> GetStatusNalogaPN(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetStatusNalogaPN", iDNalogParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetTime(Nullable<int> iDNalog, string tipVremena)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            var tipVremenaParameter = tipVremena != null ?
                new ObjectParameter("TipVremena", tipVremena) :
                new ObjectParameter("TipVremena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetTime", iDNalogParameter, tipVremenaParameter);
        }
    
        public virtual ObjectResult<GetVozac_Result> GetVozac(Nullable<int> iDVozac)
        {
            var iDVozacParameter = iDVozac.HasValue ?
                new ObjectParameter("IDVozac", iDVozac) :
                new ObjectParameter("IDVozac", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozac_Result>("GetVozac", iDVozacParameter);
        }
    
        public virtual ObjectResult<GetVozaci_Result> GetVozaci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozaci_Result>("GetVozaci");
        }
    
        public virtual ObjectResult<GetVozaciCB_Result> GetVozaciCB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozaciCB_Result>("GetVozaciCB");
        }
    
        public virtual ObjectResult<GetVozaciFree_Result> GetVozaciFree(Nullable<System.DateTime> otvaranje, Nullable<System.DateTime> zatvaranje)
        {
            var otvaranjeParameter = otvaranje.HasValue ?
                new ObjectParameter("Otvaranje", otvaranje) :
                new ObjectParameter("Otvaranje", typeof(System.DateTime));
    
            var zatvaranjeParameter = zatvaranje.HasValue ?
                new ObjectParameter("Zatvaranje", zatvaranje) :
                new ObjectParameter("Zatvaranje", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozaciFree_Result>("GetVozaciFree", otvaranjeParameter, zatvaranjeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVozacPN(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVozacPN", iDNalogParameter);
        }
    
        public virtual ObjectResult<GetVozila_Result> GetVozila()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozila_Result>("GetVozila");
        }
    
        public virtual ObjectResult<GetVozilaCB_Result> GetVozilaCB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozilaCB_Result>("GetVozilaCB");
        }
    
        public virtual ObjectResult<GetVozilaFree_Result> GetVozilaFree(Nullable<System.DateTime> otvaranje, Nullable<System.DateTime> zatvaranje)
        {
            var otvaranjeParameter = otvaranje.HasValue ?
                new ObjectParameter("Otvaranje", otvaranje) :
                new ObjectParameter("Otvaranje", typeof(System.DateTime));
    
            var zatvaranjeParameter = zatvaranje.HasValue ?
                new ObjectParameter("Zatvaranje", zatvaranje) :
                new ObjectParameter("Zatvaranje", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVozilaFree_Result>("GetVozilaFree", otvaranjeParameter, zatvaranjeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVoziloPN(Nullable<int> iDNalog)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVoziloPN", iDNalogParameter);
        }
    
        public virtual int InitinsertDrzave(Nullable<int> iDDrzava, string naziv)
        {
            var iDDrzavaParameter = iDDrzava.HasValue ?
                new ObjectParameter("IDDrzava", iDDrzava) :
                new ObjectParameter("IDDrzava", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertDrzave", iDDrzavaParameter, nazivParameter);
        }
    
        public virtual int InitinsertGradovi(Nullable<int> iDgrad, string ime, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<int> drzavaId)
        {
            var iDgradParameter = iDgrad.HasValue ?
                new ObjectParameter("IDgrad", iDgrad) :
                new ObjectParameter("IDgrad", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var drzavaIdParameter = drzavaId.HasValue ?
                new ObjectParameter("DrzavaId", drzavaId) :
                new ObjectParameter("DrzavaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertGradovi", iDgradParameter, imeParameter, latitudeParameter, longitudeParameter, drzavaIdParameter);
        }
    
        public virtual int InitinsertPutniNalozi(Nullable<int> iDNalog, Nullable<System.DateTime> otvaranje, Nullable<System.DateTime> zatvaranje, Nullable<int> vozacID, Nullable<int> voziloID, Nullable<int> mjestoStartID, Nullable<int> mjestoCiljID, Nullable<int> statusNaloga)
        {
            var iDNalogParameter = iDNalog.HasValue ?
                new ObjectParameter("IDNalog", iDNalog) :
                new ObjectParameter("IDNalog", typeof(int));
    
            var otvaranjeParameter = otvaranje.HasValue ?
                new ObjectParameter("Otvaranje", otvaranje) :
                new ObjectParameter("Otvaranje", typeof(System.DateTime));
    
            var zatvaranjeParameter = zatvaranje.HasValue ?
                new ObjectParameter("Zatvaranje", zatvaranje) :
                new ObjectParameter("Zatvaranje", typeof(System.DateTime));
    
            var vozacIDParameter = vozacID.HasValue ?
                new ObjectParameter("VozacID", vozacID) :
                new ObjectParameter("VozacID", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var mjestoStartIDParameter = mjestoStartID.HasValue ?
                new ObjectParameter("MjestoStartID", mjestoStartID) :
                new ObjectParameter("MjestoStartID", typeof(int));
    
            var mjestoCiljIDParameter = mjestoCiljID.HasValue ?
                new ObjectParameter("MjestoCiljID", mjestoCiljID) :
                new ObjectParameter("MjestoCiljID", typeof(int));
    
            var statusNalogaParameter = statusNaloga.HasValue ?
                new ObjectParameter("StatusNaloga", statusNaloga) :
                new ObjectParameter("StatusNaloga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertPutniNalozi", iDNalogParameter, otvaranjeParameter, zatvaranjeParameter, vozacIDParameter, voziloIDParameter, mjestoStartIDParameter, mjestoCiljIDParameter, statusNalogaParameter);
        }
    
        public virtual int InitinsertServisnaKnjiga(Nullable<int> iDServis, Nullable<int> voziloID, Nullable<System.DateTime> datum, Nullable<decimal> trosak)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var trosakParameter = trosak.HasValue ?
                new ObjectParameter("Trosak", trosak) :
                new ObjectParameter("Trosak", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertServisnaKnjiga", iDServisParameter, voziloIDParameter, datumParameter, trosakParameter);
        }
    
        public virtual int InitinsertVozaca(Nullable<int> iDVozac, string ime, string prezime, string mobitel, string vozackaDozvola, Nullable<int> vozacStatus)
        {
            var iDVozacParameter = iDVozac.HasValue ?
                new ObjectParameter("IDVozac", iDVozac) :
                new ObjectParameter("IDVozac", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var mobitelParameter = mobitel != null ?
                new ObjectParameter("Mobitel", mobitel) :
                new ObjectParameter("Mobitel", typeof(string));
    
            var vozackaDozvolaParameter = vozackaDozvola != null ?
                new ObjectParameter("VozackaDozvola", vozackaDozvola) :
                new ObjectParameter("VozackaDozvola", typeof(string));
    
            var vozacStatusParameter = vozacStatus.HasValue ?
                new ObjectParameter("VozacStatus", vozacStatus) :
                new ObjectParameter("VozacStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertVozaca", iDVozacParameter, imeParameter, prezimeParameter, mobitelParameter, vozackaDozvolaParameter, vozacStatusParameter);
        }
    
        public virtual int InitinsertVozila(Nullable<int> iDVozilo, string marka, string tip, Nullable<System.DateTime> godinaProizvodnje, Nullable<System.DateTime> godinaUnosa, Nullable<int> inicijalniKM)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(System.DateTime));
    
            var godinaUnosaParameter = godinaUnosa.HasValue ?
                new ObjectParameter("GodinaUnosa", godinaUnosa) :
                new ObjectParameter("GodinaUnosa", typeof(System.DateTime));
    
            var inicijalniKMParameter = inicijalniKM.HasValue ?
                new ObjectParameter("InicijalniKM", inicijalniKM) :
                new ObjectParameter("InicijalniKM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitinsertVozila", iDVoziloParameter, markaParameter, tipParameter, godinaProizvodnjeParameter, godinaUnosaParameter, inicijalniKMParameter);
        }
    
        public virtual int InsertPutniNalog(Nullable<System.DateTime> otvaranje, Nullable<System.DateTime> zatvaranje, Nullable<int> vozacID, Nullable<int> voziloID, Nullable<int> mjestoStartID, Nullable<int> mjestoCiljID, Nullable<int> statusNaloga)
        {
            var otvaranjeParameter = otvaranje.HasValue ?
                new ObjectParameter("Otvaranje", otvaranje) :
                new ObjectParameter("Otvaranje", typeof(System.DateTime));
    
            var zatvaranjeParameter = zatvaranje.HasValue ?
                new ObjectParameter("Zatvaranje", zatvaranje) :
                new ObjectParameter("Zatvaranje", typeof(System.DateTime));
    
            var vozacIDParameter = vozacID.HasValue ?
                new ObjectParameter("VozacID", vozacID) :
                new ObjectParameter("VozacID", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var mjestoStartIDParameter = mjestoStartID.HasValue ?
                new ObjectParameter("MjestoStartID", mjestoStartID) :
                new ObjectParameter("MjestoStartID", typeof(int));
    
            var mjestoCiljIDParameter = mjestoCiljID.HasValue ?
                new ObjectParameter("MjestoCiljID", mjestoCiljID) :
                new ObjectParameter("MjestoCiljID", typeof(int));
    
            var statusNalogaParameter = statusNaloga.HasValue ?
                new ObjectParameter("StatusNaloga", statusNaloga) :
                new ObjectParameter("StatusNaloga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPutniNalog", otvaranjeParameter, zatvaranjeParameter, vozacIDParameter, voziloIDParameter, mjestoStartIDParameter, mjestoCiljIDParameter, statusNalogaParameter);
        }
    
        public virtual int SetDBStatus(Nullable<int> dBStatus)
        {
            var dBStatusParameter = dBStatus.HasValue ?
                new ObjectParameter("DBStatus", dBStatus) :
                new ObjectParameter("DBStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetDBStatus", dBStatusParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
